1.13 浅谈 Python 中的模块
~~~~~~~~~~~~~~~~~~~~~~~~~

**0. 前言**

真实项目开发中，我们会对项目的常量、变量、以及函数进行统一管理，把这些声明、定义放在一个以
``.py`` 结尾的文件中，我们将这个文件称为 ``模块``\ 。

.. figure:: https://i.loli.net/2021/02/19/V5i8kMOXRTJoKFw.jpg
   :alt: 

简单来讲，模块是一个包含所有我们自己定义的函数和变量的 Python
文件，模块可以在需要的地方通过 ``import``
语句导入，以使用该模块中的常量、变量、函数等，Python
也为我们提供了很多标准的模块。

当解释器遇到 import
语句时，如果模块在当前的搜索路径中就会被导入，多次导入一个模块时，只有最后一次生效，这样可以防止导入模块被多次执行。

搜索路径存储在 ``sys`` 模块中的 ``path``
变量中，我们可以通过以下代码查看。

.. code:: python

    import sys

    print(sys.path)

其实，将项目代码模块化，可在一定程度上优化项目结构，避免单个 Python
文件代码过多的情况，提高代码可读性。

**1. 模块分类**

Python 中的模块供分为三类，即内置模块、第三方模块、以及自定义模块。

**1.1 内置模块**

内置模块是 Python 官方开发者帮我们设计好的，安装好 Python
环境我们就可以直接使用这些内置模块，比较常用的有以下模块：

    os：包含普遍的操作系统功能

    sys：提供了一系列有关 Python 运行环境的变量和函数

    random：用于生成随机数

    time: 主要包含各种提供日期、时间功能的类和函数

    datetime：对 time 模块的一个高级封装

    logging：日志处理

    re：用于实现正则匹配

    json：用于字符串和数据类型间进行转换json

**1.2 第三方模块**

第三方模块是 Python
开发者提前开发好的模块，需要安装对应的库才能使用该模块中的函数等，工作中比较常用的有以下第三方模块：

    requests：常用的 http 模块，常用于发送 http 请求

    scrapy：在网络爬虫领域必不可少

    pygame：常用于 2D 游戏的开发

    numpy：为 Python 提供了很多高级的数学方法

    Flask：轻量级开源 Web 开发框架，灵活、开发周期短

    Django：一站式开源 Web 开发框架，遵循 MVC 设计

**1.3 自定义模块**

自定义模块是我们自己根据实际需求开发的模块，通常是对某段逻辑或某些函数进行封装，供其他函数调用，使用时我们需要将其引入到我们的项目中。

需要注意的是，自定义模块的命名一定不能与内置模块重名，否则会将内置模块覆盖。

例如：我们自定义了一个 ``os.py`` 的模块，这是我们使用 ``import``
语句引入的 os 模块就是我们自己定义的这个模块，不再是内置的 os 模块。

内置模块与第三方模块还有很多，大家可以通过搜索引擎去了解、学习。

**2.模块的引入方式**

在使用模块时，我们根据不同的需求，会有三种引入方式，一是使用 ``import``
语句，二是使用 ``from ... import ...`` 语句，三是使用
``from ... import *`` 语句。

那么，这三种方式存在什么区别呢？我们接着往下看。

我们将上篇文章中的 ``笑话生成器`` 函数封装至自定义模块 ``my_demo.py``
中，代码如下：

.. code:: python

    import requests

    author = "可乐python说"


    def get_joke()->str:
        """笑话生成器"""
        # 1. 笑话获取接口 URL
        url = "https://autumnfish.cn/api/joke"
        # 2. 获取返回数据
        joke_data = requests.get(url)
        # 3. 解析数据并返回
        return joke_data.text

**2.1 import 语句**

我们可以看到，前面的案例中使用 ``import`` 语句引入了 ``requests``
模块，这就意味着将这个模块所有资源全部导入至我们项目中，通过模块名 +
``.`` 的方式来使用所需要的资源。

这里我们使用 ``requests.get(url)`` 来调用模块中的 ``get`` 方法来实现一个
``http get 请求``\ ，同理，我们也可在其他地方调用我们自定义模块中的笑话生成器函数。

创建 ``demo.py`` 文件，内容如下：

.. code:: python

    # 导入模块
    import my_demo

    # 使用模块名调用 get_joke 函数
    joke_text = my_demo.get_joke()
    print(joke_text)

执行 ``demo.py`` 文件可成功获取笑话内容，输出内如下：

    以前住一个大院，院里有一个公共厕所，为了防止外面的人进去方便就上了一把锁，仅供院里的人用。

    一次上厕所，邻居一女孩领一女同学也来，那同学好奇的问：“你们厕所还上锁，难道怕有人偷便便吗？！”

**2.2 from ... import ... 语句**

当我们只需要使用到模块中的部分资源时，全部导入未免过于消耗资源，这时我们可以使用
``from ... import ...`` 语句。

假设 ``my_demo.py`` 模块中还定义了很多函数、变量，而我们只需要使用
``author`` 这个变量，可使用以下代码实现：

.. code:: python

    # 导入模块中的 author 变量
    from my_demo import author

    # 使用 author 变量
    print(author)

输出内容如下：

    可乐python说

你看，这就是区别。

**2.3 from ... import \* 语句**

当我们需要使用模块中所有的资源是，可以使用 ``from ... import *``
语句来实现，实现代码如下：

.. code:: python

    # 导入模块中的所有资源
    from my_demo import *

    # 使用 author 变量
    print(author)
    # 调用 get_joke 函数
    joke_text = get_joke()
    print(joke_text)

输出内容如下：

    可乐python说

    “老公，我的卷发棒在哪啊？”

    “棒就棒在和你的气质特别配。”

你看，通过这种方式导入资源，使用变量名、函数即可直接使用资源。

**3.几种导入方式的区别**

通过以上例子我们不难发现，不同的导入方式，在使用资源时存在一定差异。

import 语句导入的是一个模块，相当于导入一个 ``文件夹`` ，属于
``相对路径``
，并将整个模块中的代码执行一遍，并没有在当前命名空间中导入定义的变量，使用资源时需要使用
``模块名`` + ``.`` 的方式。

什么是 ``命名空间`` ？

    命名空间是当前定义的符号名称以及每个符号名称所引用的对象的信息的集合。

    可以将命名空间视为字典，其中键是对象名称，值是对象本身。每个键值对将一个名称映射到它所对应的对象。

import ... from ...
语句则相当于导入模块中具体的资源，并将资源直接导入了当前的命名空间，使用时直接使用资源名称即可。

import ... from \* 语句与 import ... from ...
类似，但不建议使用，使用这类语句会破坏命令空间的管理，会给我们带来一些麻烦。

**4.总结**

    1、Python
    中的模块十分常用，开发者根据实际需求在内置模块、第三方模块还是自己实现中选择。

    2、自定义模块的命名与标识符规则一样，但需注意不要与内置、第三方模块重名否则会被覆盖。

    3、尽量不要使用 import ... from \*
    语句，使用该语句时，不能导入模块中前缀为 ``单下划线`` 的
    ``保护属性`` 与前缀为 ``双下划线`` 的 ``私有属性``\ 。

    4、原创文章已全部更新至
    Github：https://github.com/kelepython/kelepython。

    5、本文永久博客地址：https://kelepython.readthedocs.io/zh/latest/c01/c01\_13.html。

    6、欢迎在留言区讨论，有任何疑问也可与小编联系，也欢迎大家分享一些有趣使用的知识。

.. figure:: https://i.loli.net/2020/05/15/KQYmB3WZN2R6FEn.png
   :alt:
