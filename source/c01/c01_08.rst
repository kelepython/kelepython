1.8 数字(Number) \| 最贴近生活的 Python 数据类型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**前言**
^^^^^^^^

Hi，大家好，我是可乐，无论是工作、学习还是生活中，我们都在无时无刻与数字打交道，暂且称之为最贴近生活的
``Python`` 数据类型。

今天，给大家详细介绍一下 Python
中数字的相关知识，并附上相应的案例代码，便于吸收、理解。

.. figure:: https://i.loli.net/2020/05/28/QAxcpWvra9uZJm1.jpg
   :alt:

**数字简介**
^^^^^^^^^^^^

``数字 (Number)`` 是 Python
中基本的数据类型之一，数字类型属于数值型数据，用于存储数值，是不可改变的，数值发生改变时，会重新分配内存空间，产生新的对象。

数字类型提供 ``标量存储`` 与 ``直接访问`` ，它包括 ``整数类型(Int)``\ 、
``浮点类型(Float)``\ 、\ ``布尔(Bool)类型``\ 、以及
``复数(Complex)类型``\ 。

    整型(Int) ：通常被称为是整型或整数，是正或负整数，不带小数点。

    浮点型(Float)
    ：浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（1.8e2
    = 1.8 x 10^2 = 180）

    复数( (Complex)) ：复数由实数部分和虚数部分构成，可以用 a +
    bj，或者complex(a, b) 表示， 复数的实部 a 和虚部 b 都是浮点型。

    布尔(Bool) 型 ：数字中的 1 和 0 ，对应布尔型中的真 (True)
    和假（Flase）。

数字的相关操作包括数字运算、类型转换、数学函数、以及随机数相关函数等。

**初识数字**
^^^^^^^^^^^^

1、定义整型数字对象。

.. code:: python

    >>> def_int = 18
    >>> def_int
    18
    >>> type(def_int)
    <class 'int'>

2、定义浮点型数字对象。

.. code:: python

    >>> def_float = 1.68
    >>> def_float
    1.68
    >>> type(def_float)  
    <class 'float'>

3、定义复数型数字对象。

.. code:: python

    >>> def_complex = 6 + 8j
    >>> def_complex
    (6+8j)
    >>> type(def_complex) 
    <class 'complex'>

4、使用 ``del`` 语句删除数字对象。

.. code:: python

    >>> def_int = 18
    del def_int
    >>> def_int
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    NameError: name 'def_int' is not defined

5、数学常量 ``e`` 与 ``pi``

.. code:: python

    # Python 在 math 模块中定义了常量
    # 导入对应的常量
    >>> from math import e, pi
    # 自然对数
    >>> e
    2.718281828459045
    # 圆周率
    >>> pi
    3.141592653589793

6、与布尔值对应的数字。

.. code:: python

    # 将 Bool 值与数字做等值判断
    >>> True == 1
    True
    >>> False == 0
    True

**数字基本操作符**
^^^^^^^^^^^^^^^^^^

数字基本操作符可参照下表：

+-----------------+------------------------------------+
| 操作符          | 说明                               |
+=================+====================================+
| a + b           | a 与 b 的和                        |
+-----------------+------------------------------------+
| a - b           | a 与 b 的差                        |
+-----------------+------------------------------------+
| a / b           | a 与 b 的商                        |
+-----------------+------------------------------------+
| a // b          | a 与 b 商的整数部分                |
+-----------------+------------------------------------+
|  %              | a 与 b 的取余运算，也称模运算      |
+-----------------+------------------------------------+
|  `-` a          | a 的负数                           |
+-----------------+------------------------------------+
|  +=             | 自加运算                           |
+-----------------+------------------------------------+
|  -=             | 自减运算                           |
+-----------------+------------------------------------+
| *=              | 自乘运算                           |
+-----------------+------------------------------------+
| /=              | 自除运算                           |
+-----------------+------------------------------------+
| a ** b          | a 的 b 次幂                        |
+-----------------+------------------------------------+

1、和与差运算。

.. code:: python

    >>> 2 + 6
    8
    >>> 6 - 2
    4
    # 整型与浮点型运算的结果是浮点型
    >>> 6 + 1.68
    7.68
    >>> 6 - 1.68
    4.32

2、积与商运算。

.. code:: python

    >>> 2 * 6
    12
    # 整除的结果也为浮点型
    >>> 6 / 2
    3.0
    >>> 1.5 * 2
    3.0
    >>> 6 / 1.5
    4.0

3、取商得整数部分。

.. code:: python

    # 运算中包含浮点型，结果就为浮点型
    >>> 6 // 2
    3
    >>> 6.0 // 2
    3.0
    # 不可整除的运算仅取整数部分
    # 并不会对小数部分四舍五入
    >>> 6 // 4
    1
    >>> 14 // 3
    4

4、取余运算(模运算)。

.. code:: python

    # 整除时余数为 0 
    >>> 15 % 5
    0
    >>> 8 % 3
    2
    >>> 14 % 5
    4
    # 运算中包含浮点型，结果就为浮点型
    >>> 8.0 % 3
    2.0

5、自加运算。

.. code:: python

    >>> def_int = 18
    # 此语句等价于：
    # def_int = def_int + 1
    >>> def_int += 1
    >>> def_int
    19

6、自减运算。

.. code:: python

    >>> def_int = 18
    # 此语句等价于：
    # def_int = def_int - 1
    >>> def_int -= 1
    >>> def_int
    17

7、自乘运算。

.. code:: python

    >>> def_int = 8
    # 此语句等价于：
    # def_int = def_int * 2
    >>> def_int *= 2
    >>> def_int
    16

8、自除运算。

.. code:: python

    >>> def_int = 8
    # 此语句等价于：
    # def_int = def_int / 2
    >>> def_int /= 2
    >>> def_int
    4.0

9、幂运算。

.. code:: python

    # 2 的 3 次方，等价于：
    # 2 * 2 * 2
    >>> 2 ** 3
    8
    >>> 3 ** 3
    27

**数字类型转换方法**
^^^^^^^^^^^^^^^^^^^^

数字类型转换相关方法可参照下表：

+-----------------+------------------------------------+
| 方法            | 说明                               |
+=================+====================================+
| int(obj)        | 将对象转换为整型                   |
+-----------------+------------------------------------+
| float(obj)      | 将对象转换为浮点型                 |
+-----------------+------------------------------------+
| complex(obj)    | 将对象转换为复数型，虚部为 0       |
+-----------------+------------------------------------+
| complex(a, b)   | 生成一个复数，a 为实部，b 为虚部   |
+-----------------+------------------------------------+

1、使用 ``int`` 方法，将对象转换为整型。

.. code:: python

    >>> int(8.0)
    8
    >>> int(5.2)
    5
    # int 方法不会进行四舍五入操作
    >>> int(5.8)
    5

2、使用 ``float`` 方法，将对象转换为浮点型。

.. code:: python

    >>> float(8)
    8.0
    >>> float(88)
    88.0

3、使用 ``complex`` 方法，将对象转换为复数型。

.. code:: python

    # 不指定虚部，默认为 0
    >>> complex(8)
    (8+0j)
    # 指定虚部
    >>> complex(8, 6)
    (8+6j)

**数字运算内置函数**
^^^^^^^^^^^^^^^^^^^^

``Python`` 中的提供了一系列的数字运算内置函数，相关用法可参照下表：

+------------------+-----------------------------------------+
| 函数             | 说明                                    |
+==================+=========================================+
| max(x1,x2,...)   | 求给定序列的最大值                      |
+------------------+-----------------------------------------+
| min(x1,x2,...)   | 求给定序列的最小值                      |
+------------------+-----------------------------------------+
| abs(obj)         | 求绝对值                                |
+------------------+-----------------------------------------+
| fabs(obj)        | math 模块提供，求绝对值                 |
+------------------+-----------------------------------------+
| ceil(obj)        | math 模块提供，上入取整数               |
+------------------+-----------------------------------------+
| floor(obj)       | math 模块提供，下舍取整数               |
+------------------+-----------------------------------------+
| exp(x)           | math 模块提供，求 e 的 x 次幂           |
+------------------+-----------------------------------------+
| pow(x, y)        | 幂运算，与 x \*\* y 类似                |
+------------------+-----------------------------------------+
| round(x [,n])    | 四舍五入                                |
+------------------+-----------------------------------------+
| sqrt(x)          | math 模块提供，求平方根                 |
+------------------+-----------------------------------------+
| modf(x)          | math 模块提供，返回整数、小数部分       |
+------------------+-----------------------------------------+
| log(x)           | math 模块提供，求以 e 为底数的 x 对数   |
+------------------+-----------------------------------------+
| log10(x)         | math 模块提供，求以10 为底数的 x 对数   |
+------------------+-----------------------------------------+

下面通过案例逐一演示。

1、使用 ``max``\ 、\ ``min`` 函数，求最大值、最小值 。

.. code:: python

    >>> max(1, 6, 2.5)
    6
    >>> min(1, 6, 2.5)
    1

2、使用 ``abs``\ 、\ ``fabs`` 函数，求绝对值。

.. code:: python

    # abs 函数
    >>> abs(10)
    10
    >>> abs(-10)
    10

    # math 中的 fabs 函数
    >>> from math import fabs
    # 返回结果为浮点型
    >>> fabs(-10)
    10.0

3、使用 ``ceil``\ 、\ ``floor`` 函数，对数字取整。

.. code:: python

    >>> from math import ceil, floor
    # ceil 上入取整
    >>> ceil(5.2)
    6
    # floor 下舍取整
    >>> floor(5.8)
    5

4、使用 ``exp``\ 函数，对常量 ``e`` 进行幂运算。

.. code:: python

    >>> from math import exp, e
    # 先看下数学中的常量 e
    >>> e
    2.718281828459045
    # e 的平方
    >>> exp(2)
    7.38905609893065

5、使用 ``pow`` 函数，进行幂运算。

.. code:: python

    # 2 的平方
    >>> pow(2, 2)
    4
    # 3 的平方
    >>> pow(3, 2)
    9

6、使用 ``round`` 函数，对数字进行四舍五入操作。

.. code:: python

    >>> round(5.2)
    5
    >>> round(5.8)
    6
    # 指定小数点后保留的位数
    >>> round(5.888, 2)
    5.89

7、使用 ``sqrt`` 函数，求平方根。

.. code:: python

    >>> from math import sqrt
    # 求 4 的平方根
    >>> sqrt(4)
    2.0
    # 求 9 的平方根
    >>> sqrt(9)
    3.0

8、使用 ``modf`` 函数，返回数字的整数和小数部分。

.. code:: python

    >>> from math import modf
    # 为什么小数部分不是 0.8 
    # 而是 0.8000000000000007 呢？
    # 计算机采用二进制的方式存储数据
    # 这里不再深究，有兴趣的朋友可以研究下
    >>> modf(10.8)
    (0.8000000000000007, 10.0)
    >>> modf(16.8)
    (0.8000000000000007, 16.0)

9、使用 ``log`` 、\ ``log10`` 函数，求对数。

.. code:: python

    >>> from math import log, log10
    # log 以 e 为底数求对数
    >>> log(10)
    2.302585092994046
    >>> log(100)
    4.605170185988092

    # log10 以 10 为底数求对数
    >>> log10(10)
    1.0
    >>> log10(100)
    2.0

**随机数相关方法**
^^^^^^^^^^^^^^^^^^

工作中的一些应用场景，会经常使用到随机数，Python 中的 ``random``
模块封装了随机数的相关操作方法，相关用法可参照下表：

+-------------------------------------+--------------------------------------------------------+
| 函数                                | 说明                                                   |
+=====================================+========================================================+
| random()                            | 在 [0,1) 范围内随机生成一个实数                        |
+-------------------------------------+--------------------------------------------------------+
| uniform(x, y)                       | 在 [x,y] 范围内随机生成一个实数                        |
+-------------------------------------+--------------------------------------------------------+
| randint(x, y)                       | 在 [x,y] 范围内随机生成一个整数                        |
+-------------------------------------+--------------------------------------------------------+
| choice(seq)                         | 在序列中随机选择一个元素                               |
+-------------------------------------+--------------------------------------------------------+
| shuffle(seq)                        | 对序列的中的元素随机排序                               |
+-------------------------------------+--------------------------------------------------------+
| randrange ([start,] stop [,step])   | 在[start,stop)范围内按步长获取随机整数，步长默认为 1   |
+-------------------------------------+--------------------------------------------------------+

下面通过案例逐一演示。

1、使用 ``random`` 方法，生成 [0,1) 范围内的随机数。

.. code:: python

    # 导入 random 模块
    >>> import random
    # 调用 random 方法
    >>> random.random()
    0.8136318951871051
    >>> random.random()
    0.3454891745061127

2、使用 ``uniform`` 方法，在指定范围内生成一个随机数。

.. code:: python

    >>> import random
    # 在 [0, 10] 范围内生成随机数
    >>> random.uniform(1, 10)
    9.71818269408875
    >>> random.uniform(1, 10)
    6.691348571331768

3、使用 ``randint`` 方法，在指定范围内生成一个随机整数。

.. code:: python

    >>> import random
    # 在 [0, 10] 范围内生成随机整数
    >>> random.randint(1, 10)
    2
    >>> random.randint(1, 10)
    10

4、使用 ``choice`` 方法，在序列中随机选择一个元素。

.. code:: python

    >>> import random
    # 在序列中随机选择一个元素
    >>> random.choice([1, 3, 5, 7, 8])
    3
    >>> random.choice([1, 3, 5, 7, 8])
    7

5、使用 ``shuffle`` 方法，对序列的中的元素随机排序。

.. code:: python

    >>> import random
    >>> def_seq = [1, 3, 5, 7, 8]
    >>> random.shuffle(def_seq)
    >>> def_seq
    [3, 8, 5, 1, 7]
    >>> random.shuffle(def_seq)
    >>> def_seq
    [1, 7, 5, 8, 3]

6、使用 ``randrange`` 方法，在指定范围按特定步长获取随机整数。

.. code:: python

    >>> import random
    # 不指定步长，默认为 1 
    >>> random.randrange(1, 10)
    7
    >>> random.randrange(1, 10)
    6

    # 指定步长，只取奇数
    >>> random.randrange(1, 10, 2)
    9
    >>> random.randrange(1, 10, 2)
    7

**扩展 - 时间格式转换**
^^^^^^^^^^^^^^^^^^^^^^^

使用 ``divmod`` 方法将时间秒数转换为 ``时：分：秒`` 的格式

.. code:: python

    # 定义一个函数
    >>>  def seconds_to_hms(seconds):
            """
            秒转换为时分秒的形式
            :return:转换转换后的格式
            """
            seconds = int(seconds)
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            h_m_s = "%02d:%02d:%02d" % (h, m, s)
            return h_m_s
    # 调用函数
    >>>  seconds_to_hms(100)
    '00:01:40'
    >>>  seconds_to_hms(3600)
    '01:00:00'

**扩展 - 猜数字游戏**

.. code:: python

    import random

    # 定义一个函数
    >>> def guess_number():
            """
            猜数字游戏
            :return:相关提示语
            """
            random_num = random.randint(1, 10)
            while True:
                # 引导玩家输入 10 以内的整数
                input_number = int(input("请输入10以内的整数："))
                if input_number > random_num:
                    print("大啦，继续加油")
                elif input_number < random_num:
                    print("小啦，继续加油")
                else:
                    print("恭喜你猜中拉")
                    break
    >>> guess_number()
    请输入10以内的整数： 10
    大啦，继续加油
    请输入10以内的整数： 5
    小啦，继续加油
    请输入10以内的整数： 6
    恭喜你猜中拉

**总结**
^^^^^^^^

    1. Python 中数字相关的操作比较丰富 ，\ ``三角函数``
       相关的操作我在工作中很少使用，有兴趣的朋友可以自行尝试。
    2. 数字的基本操作符应用比较广泛，在遇到相关需求时，选择合适的使用即可，当然有时也需要配合、嵌套使用。
    3. 内置函数中求最值、取整、幂运算等相对较常用，随机数相关的函数也十分重要，如在设计短信、图片验证码时常会用到。
    4. 文中难免会出现一些描述不当之处（尽管我已反复检查多次），欢迎在留言区指正，也可分享数字相关的操作技巧、有趣的小案例。
    5. 原创文章已全部更新至
       Github：https://github.com/kelepython/kelepython
    6. 本文永久博客地址：https://kelepython.readthedocs.io/zh/latest/c01/c01\_08.html

.. figure:: https://i.loli.net/2020/05/15/KQYmB3WZN2R6FEn.png
   :alt:
